package cmd

import (
	"buffalo-token-auth/tokenauth"
	"context"

	"github.com/gobuffalo/genny"
	"github.com/gobuffalo/gogen"
	"github.com/spf13/cobra"
)

var dryRun bool
var genArgs tokenauth.TokenAuthArgs

var authCmd = &cobra.Command{
	Use:   "token-auth",
	Short: "Generates a full token-auth implementation",
	RunE: func(cmd *cobra.Command, args []string) error {
		r := genny.WetRunner(context.Background())
		if dryRun {
			r = genny.DryRunner(context.Background())
		}

		if err := r.WithNew(tokenauth.New(genArgs)); err != nil {
			return err
		}

		if err := r.WithNew(gogen.Fmt(r.Root)); err != nil {
			return err
		}

		return r.Run()
	},
}

func init() {
	authCmd.Flags().BoolVarP(&dryRun, "dry-run", "d", false, "run the generator without creating files or running commands")
	authCmd.Flags().StringSliceVarP(&genArgs.UserFields, "user-fields", "u", []string{}, "fields to add to the user model, other than email, password, and id")
	authCmd.Flags().StringVarP(&genArgs.Prefix, "token-prefix", "pre", "", "prefix for use in the JWT generated by the middleware")
	RootCmd.AddCommand(authCmd)
}
