package actions

import (
	"<%= app.PackagePkg %>/models"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/gobuffalo/validate"
	"github.com/pkg/errors"
)

// UsersError response packet for user requests
type UsersError struct {
	User  *models.User     `json:"user"`
	VErrs *validate.Errors `json:"verrs"`
	Error string           `json:"error"`
}

// UsersCreate registers a new user with the application.
func UsersCreate(c buffalo.Context) error {
	u := &models.User{}
	ur := UsersError{}

	if err := c.Bind(u); err != nil {
		println("bad bind")
		println(err.Error())
		ur.Error = err.Error()
		return c.Render(404, r.Auto(c, ur))
	}

	tx := c.Value("tx").(*pop.Connection)
	verrs, err := u.Create(tx)
	if err != nil {
		println("bad user create")
		ur.Error = err.Error()
		return c.Render(404, r.Auto(c, ur))
	}

	if verrs.HasAny() {
		println("bad validations")
		u.Password = ""
		u.PasswordConfirmation = ""
		ur.User = u
		ur.VErrs = verrs
		return c.Render(404, r.Auto(c, ur))
	}

	ur.User = u
	return c.Render(200, r.Auto(c, ur))
}

// UsersUpdate changes a User in the DB. This function is mapped to
// the path PUT /users/{user_id}
func UsersUpdate(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return c.Error(500, errors.New("no transaction found"))
	}

	// Allocate an empty User
	user := &models.User{}

	if err := tx.Find(user, c.Param("user_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind User to the html form elements
	if err := c.Bind(user); err != nil {
		return c.Error(404, err)
	}

	verrs, err := user.Update(tx)
	if err != nil {
		return c.Error(404, err)
	}

	if verrs.HasAny() {
		ur := UsersError{
			User:  user,
			VErrs: verrs,
		}
		return c.Render(422, r.Auto(c, ur))
	}

	return c.Render(200, r.Auto(c, user))
}

// UsersDestroy deletes a User from the DB. This function is mapped
// to the path DELETE /users/{user_id}
func UsersDestroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return c.Error(500, errors.New("no transaction found"))
	}

	// Allocate an empty User
	user := &models.User{}

	// To find the User the parameter user_id is used.
	if err := tx.Find(user, c.Param("user_id")); err != nil {
		return c.Error(404, err)
	}

	err := tx.Destroy(user)
	if err != nil {
		return c.Error(404, err)
	}
	return c.Render(200, r.Auto(c, "success"))
}
